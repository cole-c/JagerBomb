package hackathon;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

import entities.Bill;
import entities.Customer;
import entities.Location;
import entities.Route;
import entities.Train;

public class DataReader {

	static Integer count = 0;
	static HashMap<Integer, Event> eventHash = new HashMap<Integer, Event>();
	
	public static HashMap<Integer, Event> readEvents(){
		Scanner s = null;
		try{
			s = new Scanner(new File("data/smallData.csv"));
		}catch(FileNotFoundException e){
			e.printStackTrace();
		}
		String events = "";
	
		String[] tokensEvents;
		s.nextLine();
		while(s.hasNextLine()){
			count++;
			events = s.nextLine();
			tokensEvents = events.split(",");
			Integer eventId = Integer.parseInt(tokensEvents[0]);
			Integer eventTime = Integer.parseInt(tokensEvents[1]);
			String producerType = tokensEvents[2];
			Integer producerId = Integer.parseInt(tokensEvents[3]);
			Integer producerVersion = Integer.parseInt(tokensEvents[4]);
			String outputType = tokensEvents[5];
			Integer outputId = Integer.parseInt(tokensEvents[6]);
			Integer outputVersion = Integer.parseInt(tokensEvents[7]);
			String outputData = tokensEvents[8];
			processJSON(outputData); //temporarily void until outputData is defined
			Event event = new Event(eventId, eventTime, producerType, producerId, producerVersion, outputType, outputId, outputVersion, outputData);
			eventHash.put(eventId, event);
		}
		count = count - 1;
	
		s.close();
		return eventHash;
	}

	private static void processJSON(String outputData) {
		String[] tokensJSON;
		
		/*
		 * Customer customer = Customer(Integer id, Integer version, String name, Integer payments)
		 * Location origin = Location(Integer id, Integer version, String city, String state)
		 * Location destination = Location(Integer id, Integer version, String city, String state)
		 * Route route = Route(Integer id, Integer version, Location origin, Location destination, ArrayList<Location> locations)
		 * Bill bill = Bill(Integer id, Integer version, Customer customer, Route route, Integer charge)
		 * Train train = Train(Integer id, Integer version, Bill bill, Integer step, boolean active, Location current)
		 */
		
	}
}
